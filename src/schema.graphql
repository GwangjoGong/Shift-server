type CreateDayResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  CreateDay(startTime: String!, endTime: String!, dayNumber: Int!, timeTableId: Int!): CreateDayResponse!
  CreateLink(timetableId: Int!): CreateLinkResponse!
  RemoveLink(linkId: Int!): RemoveLinkResponse!
  CreateOrganization(name: String!, loginId: String!, email: String!, password: String!): CreateOrganizationResponse!
  OrganizationSignIn(loginId: String!, password: String!): OrganizationSignInResponse!
  RemoveOrganization: RemoveOrganizationResponse!
  UpdateOrganization(name: String, password: String, email: String): UpdateOrganizationResponse!
  CreateSlot(slots: [SlotInfo]!, personalCode: String!, timetableId: Int!, organizationId: Int!): CreateSlotResponse!
  RemoveSlot(slotId: Int!): RemoveSlotResponse!
  UpdateSlot(slotId: Int!, isFulltime: Boolean, startTime: String, endTime: String, userId: Int, day: Int): UpdateSlotResponse!
  ConfirmTimeTable(timetableId: Int!): ConfirmTimeTableResponse!
  CreateTimeTable(yearMonthWeek: String!, days: [TimeTableDay]!): CreateTimeTableResponse!
  CreateUserToOrganization(personalCode: String!, name: String!, phoneNumber: String!): CreateUserToOrganizationResponse!
  RemoveUserFromOrganization(userId: Int!): RemoveUserFromOrganizationResponse!
  UpdateUser(userId: Int!, personalCode: String, name: String, phoneNumber: String): UpdateUserResponse!
}

type GetDaysResponse {
  ok: Boolean!
  error: String
  days: [Day]
}

type Query {
  GetDays(timetableId: Int!): GetDaysResponse!
  GetLink(organizationId: Int!, timetableId: Int!): GetLinkResponse!
  GetOrganizationProfile: GetOrganizationProfileResponse!
  GetSlots(dayId: Int!): GetSlotsResponse!
  GetCurrentTimeTable(yearMonthWeek: String, timetableId: Int, organizationId: Int): GetCurrentTimeTableResponse!
  GetTimeTables: GetTimeTablesResponse!
  GetUsers: GetUsersResponse!
}

type Day {
  id: Int!
  dayNumber: Int!
  startTime: String!
  endTime: String!
  isEndTimeNextDay: Boolean!
  timetableId: Int
  timetable: TimeTable!
  slots: [Slot]
}

type CreateLinkResponse {
  ok: Boolean!
  error: String
  link: Link
}

type GetLinkResponse {
  ok: Boolean!
  error: String
  link: Link
}

type RemoveLinkResponse {
  ok: Boolean!
  error: String
}

type Link {
  id: Int!
  url: String!
  organizationId: Int
  organization: Organization!
  timetableId: Int
  timetable: TimeTable!
  createdAt: String!
  updatedAt: String
}

type CreateOrganizationResponse {
  ok: Boolean!
  error: String
  token: String
}

type GetOrganizationProfileResponse {
  ok: Boolean!
  error: String
  organization: Organization
}

type OrganizationSignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type RemoveOrganizationResponse {
  ok: Boolean!
  error: String
}

type Organization {
  id: Int!
  name: String!
  loginId: String!
  email: String!
  password: String!
  users: [User]
  links: [Link]
  timetables: [TimeTable]
  createdAt: String!
  updatedAt: String
}

type UpdateOrganizationResponse {
  ok: Boolean!
  error: String
}

type CreateSlotResponse {
  ok: Boolean!
  error: String
}

input SlotInfo {
  isFulltime: Boolean!
  dayNumber: Int!
  startTime: String!
  endTime: String!
}

type GetSlotsResponse {
  ok: Boolean!
  error: String
  slots: [Slot]
}

type RemoveSlotResponse {
  ok: Boolean!
  error: String
}

type Slot {
  id: Int!
  isFulltime: Boolean!
  startTime: String!
  endTime: String!
  userId: Int
  user: User!
  dayId: Int
  day: Day!
  createdAt: String!
  updatedAt: String
}

type UpdateSlotResponse {
  ok: Boolean!
  error: String
}

type ConfirmTimeTableResponse {
  ok: Boolean!
  error: String
}

type CreateTimeTableResponse {
  ok: Boolean!
  error: String
  timetableId: Int
}

input TimeTableDay {
  dayNumber: Int!
  startTime: String!
  endTime: String!
  isEndTimeNextDay: Boolean!
}

type GetCurrentTimeTableResponse {
  ok: Boolean!
  error: String
  timetable: TimeTable
}

type GetTimeTablesResponse {
  ok: Boolean!
  error: String
  timetables: [TimeTable]
}

type TimeTable {
  id: Int!
  isConfirmed: Boolean!
  yearMonthWeek: String!
  organizationId: Int
  organization: Organization!
  links: [Link]
  days: [Day]
  createdAt: String!
  updatedAt: String
}

type CreateUserToOrganizationResponse {
  ok: Boolean!
  error: String
}

type GetUsersResponse {
  ok: Boolean!
  error: String
  users: [User]
}

type RemoveUserFromOrganizationResponse {
  ok: Boolean!
  error: String
}

type User {
  id: Int!
  personalCode: String!
  name: String!
  phoneNumber: String!
  organizationId: Int
  organization: Organization!
  slots: [Slot]
  createdAt: String!
  updatedAt: String
}

type UpdateUserResponse {
  ok: Boolean!
  error: String
}
